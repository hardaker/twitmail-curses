#!/usr/bin/perl

use strict;
use DBI;
use Curses::UI;
use Net::Twitter;
use Data::Dumper;
use Text::Wrap;
use Getopt::GUI::Long;
use strict;
use Date::Parse;

our $VERSION = "0.2";
our $dbh;

my $DBVERSION = 1;


Getopt::GUI::Long::Configure(qw(display_help no_ignore_case allow_zero));

my %opts = (m => 'friends,replies',
	    I => 4);

GetOptions(\%opts,
	   ["a|show-all", "Show all messages, not just recent"],
	   ["m|modes=s",  "Comma separated modes to use: friends,replies"],
	   ["u|update",   "Set your status from arguments"],
	   ["r|reply=i",  "Reply to message number INTEGER with text from arguments"],
	   ["c|curses",   "Display curses interface"],
	   ["C|collect-db", "just collect data"],
	   ["f|follow=s", "Follow the user named STRING"],
	   ["S|no-save",  "Don't save the config file back"],
	   ["I|indent-depth", "Amount of spaces to use when indenting"],
	   ["n|count=i",  "Number of messages to return (max)"],
	   ["d|dump",     "Dumper the results instead of nicely printing"],
	  );

my %config;

read_config();

my $twit = Net::Twitter->new(username => $config{'user'},
			     password => $config{'password'},
			     source => 'twitmail');

#$twit->credentials($config{'user'}, $config{'password'});

# set our update status
if ($opts{'u'}) {
    $twit->update({status => format_message()});
}

# reply
if ($opts{'r'}) {
    $opts{'r'} = sprintf("%02.2d", $opts{'r'});
    if (!exists($config{'msgnum' . $opts{'r'}})) {
	die "No such message number: $opts{'r'}\n";
    }
    $twit->update({status =>
		   format_message('@' . $config{'usernum' . $opts{'r'}}),
		   in_reply_to_status_id => $config{'msgnum' . $opts{'r'}}});
    exit;
}

# add a friend if needed
if ($opts{'f'}) {
    $twit->create_friend({id => $opts{'f'}, follow => '1'});
}

if ($opts{'c'}) {
    do_curses();
    exit;
}

if ($opts{'C'}) {
    collect_tweets();
    exit;
}

# display mail
my @modes = split(/\s*,\s*/,$opts{'m'});

my $msgnum = 0;

foreach my $mode (@modes) {

    my %args;
    if (!$opts{'a'} && defined($config{$mode . '_since_id'})) {
	$args{'since_id'} = $config{$mode . '_since_id'};
    }

    if ($opts{'n'}) {
	$args{'count'} = $opts{'n'};
    }

    if ($mode eq 'replies') {
	print_results($twit->replies(\%args), $mode, 'since_id', 'id');
    }

    if ($mode eq 'friends') {
	print_results($twit->friends_timeline(\%args), $mode, 'since_id', 'id');
    }

    if ($mode eq 'public') {
	print_results($twit->public_timeline(\%args), $mode);
    }
}

save_config();

sub print_results {
    my ($data, $mode, $setarg, $setfrom) = @_;
    my @newdata;
    my %ids;

    if ($opts{'d'}) {
	print Dumper($_[0]);
	return;
    }

    if ($twit->http_message() ne 'OK') {
	print "ERROR!\n";
	print "  ", $twit->http_code(),"\n";
	print "  ", $twit->http_message(),"\n";
	print "  ", $twit->get_error()->{'error'},"\n";
	exit(1);
    }

    return if ($#$data == -1);
    print "---- $mode ------------------------------------------------------------\n";

    foreach my $dat (@$data) {
	$ids{$dat->{'id'}} = $dat;
    }
    foreach my $dat (@$data) {
	if ($dat->{'in_reply_to_status_id'} &&
	    exists($ids{$dat->{'in_reply_to_status_id'}})) {
	    push @{$ids{$dat->{'in_reply_to_status_id'}}{'replies'}}, $dat;
	} else {
	    push @newdata, $dat;
	}
    }
    print_each_result(\@newdata, $mode, $setarg, $setfrom, 0, "", "");
}

sub print_each_result {
    my ($data, $mode, $setarg, $setfrom, $indent, $lastday, $lastuser) = @_;

    $indent ||= 0;

    my $intext = " " x ($indent * $opts{'I'});

    foreach my $dat (reverse @$data) {

	$msgnum++;

	# set the time stamp from zulu time to localtime
	$dat->{'created_at'} = localtime(str2time($dat->{'created_at'}));

	# truncate for prettiness
	$dat->{'created_at'} =~ s/^(...)......./$1/; # only use day of week
	my $thisday = $1;
	$dat->{'created_at'} =~ s/:\d\d//;           # drop seconds
	$dat->{'created_at'} =~ s/^$lastday/   / if ($lastday);
	$lastday = $thisday;

	# print the results
	print wrap(sprintf("%2.2d %-9.9s %-10.10s $intext", $msgnum,
			   $dat->{'created_at'},
			   ($lastuser eq $dat->{'user'}{'screen_name'})
			   ? "" : $dat->{'user'}{'screen_name'}),
		   sprintf("%2.2s %-9.9s %-10.10s $intext","", "",""),
		   $dat->{'text'}),"\n";
	$lastuser = $dat->{'user'}{'screen_name'};

	my $formattednum = sprintf("%02.2d", $msgnum);

	$config{'msgnum' . $formattednum} = 
	  $dat->{'id'} if (exists($dat->{'id'}));
	$config{'usernum' . $formattednum} =
	  $dat->{'user'}{'screen_name'} if (exists($dat->{'user'}));

	if (exists($dat->{'replies'})) {
	    print_each_result($dat->{'replies'}, $mode, $setarg, $setfrom,
			      $indent+1, $lastday, $lastuser);
	}

    }

#    print "  ", Dumper($twit->get_error()),"\n";

    # XXX: only if error
    if (defined($mode) && defined($setarg)) {
	$config{"${mode}_${setarg}"} = $data->[0]{$setfrom || $setarg};
    }
}

sub read_config {
    open(I, $ENV{'HOME'} . "/.twitmailrc");
    while (<I>) {
	my @data = /^([^\s]+)\s+(.*)/;
	$config{$data[0]} = $data[1];
    }
}

sub save_config {
    return if ($opts{'S'});
    open(O, ">" . $ENV{'HOME'} . "/.twitmailrc");
    foreach my $key (sort keys(%config)) {
	print O "$key\t$config{$key}\n";
    }
}

sub format_message {
    my $output;
    $output .= join(" ",@_, @ARGV);
    if (length($output) > 140) {
	die "message too long (" . length($output) . " > 140); sorry\n";
    }
    return $output;
}

##############################################################################
# CURSES
#   (foiled again)
#

my $count = 0;
my $tweets;
my %tweets;
my $subjectListBox;
my %subjects;
my %tweets;
my $twit;

my %msginfo;

sub show_msg {
    my $num = $_[0]->get_active_value();
    my $tweet = $tweets{$num}[10];
    $msginfo{'from'}->text($tweets{$num}[2]);
    $msginfo{'fromname'}->text($tweets{$num}[3]);
    $msginfo{'date'}->text($tweets{$num}[6]);
    $msginfo{'reply'}->text($tweets{$num}[9]);
    $msginfo{'text'}->text($tweets{$num}[10]);
}

sub set_listbox {
    $tweets = get_tweets();

    my (@ids, %text);
    foreach my $tweet (@$tweets) {
	push @ids, $tweet->[0];
	$text{$tweet->[0]} = 
	  sprintf("%-12.12s %s", $tweet->[2], $tweet->[$#$tweet-1]);
    }

    $subjectListBox->labels(\%text);
    $subjectListBox->values(\@ids);
}

sub do_curses {
#    import  Curses::UI;
    my $twitline = 20;
    my $beyondheaders = 10;

    my $cui = new Curses::UI( -color_support => 1 );


    my $win = $cui->add('win', 'Window',
			 -border => 1,
			 -y      => 1, # eventually a menu
			 -bfg    => 'blue');

    $subjectListBox = $win->add("lb", "Listbox",
				-values => [],
				-labels => {},
				-onselchange => \&show_msg,
				-width => -1,
				-height => 15);
    $subjectListBox->focus();

    #
    # From fields
    #
    $win->add("fromlabel", "Label",
	      -text => "From:",
	      -y => $twitline,
	      -x => 1, -width => $beyondheaders-1, -height => 1);
    $msginfo{'from'} = 
      $win->add("from", "Label",
		-y => $twitline,
		-x => $beyondheaders, -width => 14, -height => 1,
	       );

    $msginfo{'fromname'} = 
      $win->add("fromname", "Label",
		-y => $twitline,
		-x => $beyondheaders + 15, -width => 30, -height => 1,
	       );

    #
    # in reply to fields
    #
    $win->add("replylabel", "Label",
	      -text => "Reply:",
	      -y => $twitline+1,
	      -x => 1, -width => $beyondheaders-1, -height => 1);

    $msginfo{'reply'} = 
      $win->add("reply", "Label",
		-y => $twitline+1,
		-x => $beyondheaders, -width => 10, -height => 1,
	       );

    $msginfo{'replyname'} = 
      $win->add("replyname", "Label",
		-y => $twitline+1,
		-x => $beyondheaders + 11, -width => 30, -height => 1,
	       );

    #
    # in reply to fields
    #
    $win->add("datelabel", "Label",
	      -text => "Sent:",
	      -y => $twitline+2,
	      -x => 1, -width => $beyondheaders-1, -height => 1);

    $msginfo{'date'} = 
      $win->add("date", "Label",
		-y => $twitline+2,
		-x => $beyondheaders, -width => 40, -height => 1,
	       );


    $msginfo{'text'} = $win->add("tl", "TextEditor",
				 -readonly => 1, -wrapping => 1,
				 -selectable => 0,
				 -text => "baaar\nbaz",
				 -y => $twitline + 4,
				 -x => 3, -width => 76, -height => 4,
				);

    $twit = $win->add("twit", "TextEditor",
		      -wrapping => 1,
		      -bfg => 'green',
		      -border => 1,
		      -text => "",
		      -y => $twitline+10, -x => 0, -width => 78, -height => 4,
		     );

    #    my $text = $win->add("text1", "TextEditor");
    #    $text->focus();

    # boot stap the list values
    set_listbox();

    $cui->set_binding(sub {exit} , "\cQ");
    $cui->mainloop();
}

my $instweeth;
my $deltweeth;
sub remember_tweets {
    my @tweets = @_;
    if (!$instweeth) {
	$deltweeth = $dbh->prepare_cached("delete from tweets where id = ?");
	$instweeth =
	  $dbh->prepare_cached("insert into tweets(id, fromid, fromuser,
                                                   fromname, fromdesc, fromurl,
                                                   created_at, inreplytoid,
                                                   inreplytouserid,
                                                   inreplytousername,
                                                   tweet)
                                values(?, ?, ?, ?, ?, ?, ?, ?, ? ,?, ?)");
	die "failed to create insert to tweets statement $! $@"
	  if (!$instweeth);
    }
    foreach my $tweet (@tweets) {
	$deltweeth->execute($tweet->{'id'});  # delete any old copy
	$instweeth->execute($tweet->{'id'},
			    $tweet->{'user'}{'id'},
			    $tweet->{'user'}{'screen_name'},
			    $tweet->{'user'}{'name'},
			    $tweet->{'user'}{'desc'},
			    $tweet->{'user'}{'url'},
			    $tweet->{'created_at'},
			    $tweet->{'in_reply_to_status_id'},
			    $tweet->{'in_reply_to_user_id'},
			    $tweet->{'in_reply_to_screen_name'},
			    $tweet->{'text'});
    }
}

my $gettweeth;
sub get_tweets {
    init_dbh();
    if (!$gettweeth) {
	$gettweeth =
	  $dbh->prepare_cached("select * from tweets $_[0] order by id desc $_[1]");
    }
    $gettweeth->execute();
    my $results = $gettweeth->fetchall_arrayref();
    foreach my $tweet (@$results) {
	$tweets{$tweet->[0]} = $tweet;
    }
    return $results;
}

sub collect_tweets {
    init_dbh();
    my $lastid = get_config('last_id');

    my $friend_data = $twit->friends_timeline();
    remember_tweets(@$friend_data);

#     $twit->replies(\%args), $mode, 'since_id', 'id');

#     if ($mode eq 'friends') {
# 	print_results($twit->friends_timeline(\%args), $mode, 'since_id', 'id');
#     }

#     if ($mode eq 'public') {
# 	print_results($twit->public_timeline(\%args), $mode);
}

my $paramconfig;
sub get_config {
    my ($name) = @_;
    # check the DB version
    if (!$paramconfig) {
	$paramconfig = $dbh->prepare_cached("select value from twitmail where name = '$name'");
    }
    my $result = '';
    if ($paramconfig) {
	$paramconfig->execute();
	$result = $paramconfig->fetchrow_arrayref();
	$result = $result->[0] if (ref($result) eq 'ARRAY');
	$paramconfig->finish(); # required to work around a bug.
    }
    return $result;
}

my $setparamconfig;
my $delparamconfig;
sub set_config {
    my ($name, $value) = @_;
    # check the DB version
    if (!$setparamconfig) {
	$setparamconfig = $dbh->prepare_cached("insert into twitmail(name, value) values(?, ?)");
	$delparamconfig = $dbh->prepare_cached("delete from twitmail where name = ?");
    }
    $delparamconfig->execute($name);
    $setparamconfig->execute($name, $value);
}

sub init_dbh {
    # set up the DB
    $dbh = DBI->connect("DBI:SQLite:dbname=" . $ENV{'HOME'} . "/.twitmaildb");
    $dbh->{'sqlite_handle_binary_nulls'} = 1;
    $dbh->{'unicode'} = 1;

    # check the DB version
    my $ver = get_config('dbversion');
    print "DATABASE VERSION: $ver\n";
    return if ($ver eq $DBVERSION);
    setup_database();
}

sub setup_database {

    print "CREATING DATABASE\n";
    # create the DB
    $dbh->do("CREATE table twitmail (
              name       varchar(255),
              value      varchar(4096)
              )");
    $dbh->do("INSERT into twitmail(name, value) values('dbversion','" . $DBVERSION . "')");

    $dbh->do("CREATE table tweets (
              id                                 int,
              fromid                             int,
              fromuser                           varchar(4096),
              fromname                           varchar(4096),
              fromdesc                           varchar(4096),
              fromurl                            varchar(4096),
              created_at                         varchar(4096),
              inreplytoid                        int,
              inreplytouserid                    int,
              inreplytousername                  varchar(4096),
              tweet                              varchar(4096),
              twitmailstatus                     varchar(4096)
             )");
}


=pod

=head1 NAME

twitmail - Because some tweets you just can't afford to miss

=head1 SYNOPSIS

Read new twits:

  # twitmail
  ---- friends ---------------------------------------------------------
  01 Tue 18:33 airsax     woohoo finally my DSP board plays nice with my
                          macbook!!!  i've spent on and off the last 3
                          or 4 weeks working on this!
  02     18:38 canusis    how does it always get to be 7pm, and I haven't
                          even gotten started on any work yet?
                          tomorrow won't be any better, meetings from
                          11-5.
  03     19:10 andrewsf   After 4 crashes in 5 minutes, I'm wondering if
                          paper would be a more productive
                          alterrnative to Microsoft Word.

Update your status:

  # twitmail -u is writing documentation for twitmail

Reply to an existing post (#3 ... @NAME is auto-added):

  # twitmail -r 3 Maybe you should write your paper in tweets

Check for new updates (note how replies to me (@hardaker) are singled out):

  # twitmail
  ---- replies ------------------------------------------------------
  01 Tue 20:13 jasonsalas @hardaker here's that @metajack post about
                          bot design...good stuff!    http://is.gd/bzDV
  ---- friends ------------------------------------------------------
  02 Tue 20:24 hardaker   @andrewsf Maybe you should write your paper
                          in tweets


=head1 DESCRIPTION

B<twitmail> was designed as a command-line client to keep track of
tweets that have occured.  Yes, I have fancy graphical clients to do
that too.  But, most of them don't easily show replies to my previous
mesasges without scrolling back a ways.  Especially when I've been
gone for 3 days.  So, twitmail was designed to accomodate that need
and just print a quick summary of tweets that have arrived.

By default, running twitmail without arguments checks for both replies
and friend updates.

=head1 CONFIGURATION

You need to put the following two lines in a ~/.twitmailrc file:

  user     TWITER-USER-NAME
  password TWITTER-PASSWORD

=head1 OPTIONS

=over

=item -a

Shows all messages, not just the most recent.

=item -m MODES

B<MODES> is a comma separated list of things to show:

=over

=item replies

Replies sent to you

=item friends

Updates from friends

=item public

Show updates from all the world.

=back

The default value is friends,replies

=item -u MESSAGE

Updates your twitter status to B<MESSAGE>

=item -r NUM MESSAGE

Replies to a particular message B<NUM>.  A I<@user> prefix will automatically
be added so all you need is the message number (the left most column
in the output).

=item -f USER

Follows a particular B<USER>.  Doesn't seem to work yet.

=item -S

Tells twitmail not to save the configuration again.  In particular,
this means that it will not remember you've just read the messages
you've read and you'll see them again next time.

=item -n COUNT

Only displays B<COUNT> messages.

(has an issue with some modes)

=back

=head1 TODO

Things on the todo list:

=over

=item -

Make replies indented and next to other messages

=item -

Detect that not enough messages could be retrieved and realize you skipped some.

=back

=head1 AUTHOR

Wes Hardaker <hardaker ATAT users.sourceforge.net>

AKA "hardaker" on twitter.com, IRC, and other places

=cut

